<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Murray Groves</title>
    <link>/techs/python/</link>
    <description>Recent content in Python on Murray Groves</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Â© Murray Groves</copyright>
    <lastBuildDate>Thu, 02 May 2019 19:47:09 +0200</lastBuildDate>
    
	<atom:link href="/techs/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CBIS Car Xbox Interface</title>
      <link>/portfolio/cbis-car-xbox-over-wifi/</link>
      <pubDate>Thu, 02 May 2019 19:47:09 +0200</pubDate>
      
      <guid>/portfolio/cbis-car-xbox-over-wifi/</guid>
      <description>I was given the CBIS education DIY car, the two ways of controlling were either via controller wired into the car or over Wi-Fi via a website with buttons. The wired controller was not practical as you had to follow the car around everywhere and the website was difficult to use due to having to press buttons with your mouse. To solve this problem, I made a program that takes inputs from an Xbox controller using the &amp;lsquo;inputs&amp;rsquo; library and mapped them to the different buttons on the website using the &amp;lsquo;selenium&amp;rsquo; library, this leads to a much more convenient driving experience and is much more ergonomic than either of the existing options.</description>
    </item>
    
    <item>
      <title>Oracle Discord Bot</title>
      <link>/portfolio/welcome-to-nightvale-discord-bot/</link>
      <pubDate>Thu, 02 May 2019 19:47:09 +0200</pubDate>
      
      <guid>/portfolio/welcome-to-nightvale-discord-bot/</guid>
      <description>An interactive Discord bot written in discord.py for a Discord server that I&amp;rsquo;m in.
Features:
 Learn new call response based commands in real-time based on user input View existing commands Remove commands View a random command and response as the bot&amp;rsquo;s status  </description>
    </item>
    
    <item>
      <title>Overwatch SSE3 Integration</title>
      <link>/portfolio/overwatch-sse3-integration/</link>
      <pubDate>Thu, 02 May 2019 19:47:09 +0200</pubDate>
      
      <guid>/portfolio/overwatch-sse3-integration/</guid>
      <description>One of the many parts of Overwatch is cooldown management, it can be hard to know whether your abilities are available in the middle of a battle, to fix this issue I made a Python program that takes determines a user&amp;rsquo;s current hero by taking screenshots of the bottom left of the screen and running them through a comparison algorithm. Whenever it detects a keypress that activates an ability it starts a timer and at the end uses the SteelSeries SDK to interact with their devices in whichever way the user selects.</description>
    </item>
    
    <item>
      <title>Pyaccounts</title>
      <link>/portfolio/pyaccounts/</link>
      <pubDate>Thu, 02 May 2019 19:47:09 +0200</pubDate>
      
      <guid>/portfolio/pyaccounts/</guid>
      <description>After making my Welcome To Nightvale Discord Bot, I was thinking about how complicated it was to create databases. It was with this thought that I decided to make a Python package to allow quick and easy integration of a user accounts system into any Python project. The package uses sha224 hashing for safe storage of passwords and AES ECB encryption for storage of account data.
Features: - Create a user account in one function call - Login a user with one function call - Add additional user data with one function call - Read additional user data with one function call</description>
    </item>
    
  </channel>
</rss>